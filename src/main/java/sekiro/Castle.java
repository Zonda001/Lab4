package sekiro;

import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.image.Image;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

public class Castle {
    String name;
    String castleType;
    Canvas canvas;
    ArrayList<Owl> owls;
    double x, y;

    // –°–∏—Å—Ç–µ–º–∞ —Ç–µ–∫—Å—Ç—É—Ä
    private static Map<String, Image> textures = new HashMap<>();
    private static boolean texturesLoaded = false;
    private static boolean texturesLoading = false;
    private boolean readyToDraw = false;

    public Castle(String name, String castleType, double x, double y) {
        this.name = name;
        this.castleType = castleType;
        this.x = x;
        this.y = y;
        this.owls = new ArrayList<>();

        canvas = new Canvas(250, 200);

        // –°–ø–æ—á–∞—Ç–∫—É –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç–µ–∫—Å—Ç—É—Ä–∏, –ø–æ—Ç—ñ–º –º–∞–ª—é—î–º–æ
        loadTexturesIfNeeded(() -> {
            this.readyToDraw = true;
            drawCastle();
        });

        Main.group.getChildren().add(canvas);
        canvas.setLayoutX(x);
        canvas.setLayoutY(y);
    }

    // –°—Ç–∞—Ç–∏—á–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö —Ç–µ–∫—Å—Ç—É—Ä
    private static void loadTexturesIfNeeded(Runnable onComplete) {
        if (texturesLoaded) {
            onComplete.run();
            return;
        }

        if (texturesLoading) {
            // –Ø–∫—â–æ —Ç–µ–∫—Å—Ç—É—Ä–∏ –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—é—Ç—å—Å—è, —á–µ–∫–∞—î–º–æ
            new Thread(() -> {
                while (texturesLoading) {
                    try {
                        Thread.sleep(50);
                    } catch (InterruptedException e) {
                        Thread.currentThread().interrupt();
                        break;
                    }
                }
                onComplete.run();
            }).start();
            return;
        }

        texturesLoading = true;

        new Thread(() -> {
            try {
                // –°–ø–∏—Å–æ–∫ –≥–æ—Ç–æ–≤–∏—Ö —Ç–µ–∫—Å—Ç—É—Ä –∑–∞–º–∫—ñ–≤
                String[] castleTextures = {
                        "asina_castle.png",      // –ü–æ–≤–Ω–∞ —Ç–µ–∫—Å—Ç—É—Ä–∞ –∑–∞–º–∫—É –ê—Å—ñ–Ω–∞
                        "hirata_estate.png",     // –ü–æ–≤–Ω–∞ —Ç–µ–∫—Å—Ç—É—Ä–∞ –•—ñ—Ä—É-–¥–µ–Ω
                        "senpou_temple.png"     // –ü–æ–≤–Ω–∞ —Ç–µ–∫—Å—Ç—É—Ä–∞ –í–µ—Ä—Ö–Ω—å–æ–≥–æ –ë–∞—à—Ç–æ–≤–æ–≥–æ –î–æ–¥–∑—å–æ
                };

                for (String textureName : castleTextures) {
                    loadTexture(textureName);
                }

                texturesLoaded = true;
                texturesLoading = false;

                // –í–∏–∫–ª–∏–∫–∞—î–º–æ callback —É –≥–æ–ª–æ–≤–Ω–æ–º—É –ø–æ—Ç–æ—Ü—ñ JavaFX
                javafx.application.Platform.runLater(onComplete);

            } catch (Exception e) {
                System.err.println("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É—Ä: " + e.getMessage());
                texturesLoaded = false;
                texturesLoading = false;
                // –ù–∞–≤—ñ—Ç—å —è–∫—â–æ —Ç–µ–∫—Å—Ç—É—Ä–∏ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∏—Å—å, –¥–æ–∑–≤–æ–ª—è—î–º–æ –º–∞–ª—é–≤–∞–Ω–Ω—è
                javafx.application.Platform.runLater(onComplete);
            }
        }).start();
    }

    private static void loadTexture(String fileName) {
        try {
            InputStream stream = Castle.class.getResourceAsStream("/textures/castles/" + fileName);
            if (stream != null) {
                Image image = new Image(stream);
                textures.put(fileName, image);
                stream.close();
                System.out.println("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —Ç–µ–∫—Å—Ç—É—Ä—É: " + fileName);
            } else {
                System.out.println("–¢–µ–∫—Å—Ç—É—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞: " + fileName);
            }
        } catch (Exception e) {
            System.err.println("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É—Ä–∏ " + fileName + ": " + e.getMessage());
        }
    }

    private void drawCastle() {
        if (!readyToDraw) {
            return; // –ü—Ä–æ—Å—Ç–æ –Ω–µ –º–∞–ª—é—î–º–æ –Ω—ñ—á–æ–≥–æ, –ø–æ–∫–∏ —Ç–µ–∫—Å—Ç—É—Ä–∏ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ
        }

        GraphicsContext gc = canvas.getGraphicsContext2D();
        gc.clearRect(0, 0, canvas.getWidth(), canvas.getHeight());

        // –°–ø–æ—á–∞—Ç–∫—É –º–∞–ª—é—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω—ñ –ø–æ–ª—è (—Ñ–æ–Ω)
        drawCastleInfo(gc);

        // –í–∏–∑–Ω–∞—á–∞—î–º–æ —è–∫—É —Ç–µ–∫—Å—Ç—É—Ä—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏
        String textureFileName = getCastleTextureFileName();
        Image castleTexture = textures.get(textureFileName);

        if (castleTexture != null && !castleTexture.isError()) {
            // –ú–∞–ª—é—î–º–æ –≥–æ—Ç–æ–≤—É —Ç–µ–∫—Å—Ç—É—Ä—É –∑–∞–º–∫—É –º—ñ–∂ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏–º–∏ –ø–æ–ª—è–º–∏
            // –ó–∞–ª–∏—à–∞—î–º–æ –º—ñ—Å—Ü–µ –∑–≤–µ—Ä—Ö—É (30px) —Ç–∞ –∑–Ω–∏–∑—É (25px) –¥–ª—è —Ç–µ–∫—Å—Ç—É
            gc.drawImage(castleTexture, 5, 30, 240, 140);
        } else {
            // –Ø–∫—â–æ —Ç–µ–∫—Å—Ç—É—Ä–∞ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∞—Å—å, –º–∞–ª—é—î–º–æ –ø—Ä–æ—Å—Ç–∏–π –∑–∞–º–æ–∫
            drawFallbackCastle(gc);
        }

        // –ü–µ—Ä–µ–º–∞–ª—é–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø–æ–≤–µ—Ä—Ö –≤—Å—å–æ–≥–æ
        drawCastleInfoOverlay(gc);
    }

    private void drawCastleInfo(GraphicsContext gc) {
        // –ù–∞–ø—ñ–≤–ø—Ä–æ–∑–æ—Ä–∏–π —Ñ–æ–Ω –¥–ª—è —Ç–µ–∫—Å—Ç—É (—Ç—ñ–ª—å–∫–∏ —Ñ–æ–Ω, –±–µ–∑ —Ç–µ–∫—Å—Ç—É)
        gc.setFill(Color.color(0, 0, 0, 0.7));
        gc.fillRect(5, 5, 240, 25);  // –í–µ—Ä—Ö–Ω—î –ø–æ–ª–µ
        gc.fillRect(5, 170, 240, 25); // –ù–∏–∂–Ω—î –ø–æ–ª–µ
    }

    private void drawCastleInfoOverlay(GraphicsContext gc) {
        // –ù–∞–∑–≤–∞ –∑–∞–º–∫—É
        gc.setFill(Color.WHITE);
        gc.setFont(new Font("Arial Bold", 16));
        gc.fillText(name, 10, 22);

        // –¢–∏–ø –∑–∞–º–∫—É
        gc.setFill(Color.LIGHTBLUE);
        gc.setFont(new Font("Arial", 12));
        gc.fillText(castleType, 10, 185);

        // –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–æ–≤
        gc.setFill(Color.GOLD);
        gc.setFont(new Font("Arial Bold", 14));
        gc.fillText("ü¶â –°–æ–≤: " + owls.size(), 150, 185);
    }

    private void drawFallbackCastle(GraphicsContext gc) {
        // –†–µ–∑–µ—Ä–≤–Ω–µ –º–∞–ª—é–≤–∞–Ω–Ω—è, —è–∫—â–æ —Ç–µ–∫—Å—Ç—É—Ä–∏ –Ω–µ–º–∞—î
        Color castleColor = Color.GRAY;
        Color roofColor = Color.DARKRED;

        switch (castleType) {
            case "–ó–∞–º–æ–∫ –ê—Å—ñ–Ω–∞":
                castleColor = Color.LIGHTGRAY;
                roofColor = Color.RED;
                break;
            case "–•—ñ—Ä—É-–¥–µ–Ω":
                castleColor = Color.SANDYBROWN;
                roofColor = Color.BROWN;
                break;
            case "–í–µ—Ä—Ö–Ω—ñ–π –ë–∞—à—Ç–æ–≤–∏–π –î–æ–¥–∑—å–æ":
                castleColor = Color.DARKGRAY;
                roofColor = Color.DARKBLUE;
                break;
        }

        // –ú–∞–ª—é—î–º–æ –ø—Ä–æ—Å—Ç–∏–π –∑–∞–º–æ–∫ –≤ –¥–æ—Å—Ç—É–ø–Ω—ñ–π –æ–±–ª–∞—Å—Ç—ñ (–º—ñ–∂ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏–º–∏ –ø–æ–ª—è–º–∏)
        // –û—Å–Ω–æ–≤–Ω–∞ –±—É–¥—ñ–≤–ª—è
        gc.setFill(castleColor);
        gc.fillRect(60, 95, 130, 65);
        gc.setStroke(Color.BLACK);
        gc.setLineWidth(2);
        gc.strokeRect(60, 95, 130, 65);

        // –ë–∞—à—Ç–∏ (–º–µ–Ω—à—ñ —Ä–æ–∑–º—ñ—Ä–∏)
        gc.fillRect(45, 80, 30, 80);
        gc.fillRect(175, 80, 30, 80);
        gc.strokeRect(45, 80, 30, 80);
        gc.strokeRect(175, 80, 30, 80);

        // –î–∞—Ö–∏ (–∞–¥–∞–ø—Ç–æ–≤–∞–Ω—ñ –ø—ñ–¥ –Ω–æ–≤–∏–π —Ä–æ–∑–º—ñ—Ä)
        gc.setFill(roofColor);
        double[] xTower1 = {42, 60, 78};
        double[] yTower1 = {80, 55, 80};
        gc.fillPolygon(xTower1, yTower1, 3);

        double[] xTower2 = {172, 190, 208};
        double[] yTower2 = {80, 55, 80};
        gc.fillPolygon(xTower2, yTower2, 3);

        double[] xRoof = {50, 125, 200};
        double[] yRoof = {95, 70, 95};
        gc.fillPolygon(xRoof, yRoof, 3);

        // –í–æ—Ä–æ—Ç–∞ —Ç–∞ –≤—ñ–∫–Ω–∞ (–º–µ–Ω—à—ñ —Ç–∞ –≤ —Ü–µ–Ω—Ç—Ä—ñ)
        gc.setFill(Color.SADDLEBROWN);
        gc.fillRect(115, 130, 20, 30);
        gc.setFill(Color.YELLOW);
        gc.fillRect(80, 110, 12, 12);
        gc.fillRect(158, 110, 12, 12);
    }


    private String getCastleTextureFileName() {
        switch (castleType) {
            case "–ó–∞–º–æ–∫ –ê—Å—ñ–Ω–∞":
                return "asina_castle.png";
            case "–•—ñ—Ä—É-–¥–µ–Ω":
                return "hirata_estate.png";
            case "–í–µ—Ä—Ö–Ω—ñ–π –ë–∞—à—Ç–æ–≤–∏–π –î–æ–¥–∑—å–æ":
                return "senpou_temple.png";
            default:
                return "default_castle.png";
        }
    }

    public void addOwl(Owl owl) {
        if (!owls.contains(owl)) {
            owls.add(owl);
            owl.setBelongsToCastle(this);
            redraw();
        }
    }

    public void removeOwl(Owl owl) {
        if (owls.contains(owl)) {
            owls.remove(owl);
            owl.setBelongsToCastle(null);
            redraw();
        }
    }

    public void redraw() {
        if (readyToDraw) {
            drawCastle();
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è (—Å–∏–Ω–æ–Ω—ñ–º –¥–ª—è redraw)
    public void updateDisplay() {
        redraw();
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å–æ–≤
    public int getOwlCount() {
        return owls.size();
    }

    // –í–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –Ω–∞–∑–≤ —Å–æ–≤
    public String getOwlsList() {
        if (owls.isEmpty()) {
            return "–ù–µ–º–∞—î —Å–æ–≤";
        }

        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < owls.size(); i++) {
            Owl owl = owls.get(i);
            sb.append(owl.name);
            if (owl.hasShinobiTechniques) {
                sb.append(" (Shinobi)");
            }
            sb.append(" [").append(owl.skillLevel).append("]");

            if (i < owls.size() - 1) {
                sb.append("\n");
            }
        }
        return sb.toString();
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Å–æ–≤
    public String getDetailedOwlsList() {
        if (owls.isEmpty()) {
            return "–£ —Ü—å–æ–º—É –∑–∞–º–∫—É –Ω–µ–º–∞—î —Å–æ–≤";
        }

        StringBuilder sb = new StringBuilder();
        sb.append("–°–ø–∏—Å–æ–∫ —Å–æ–≤ —É –∑–∞–º–∫—É ").append(name).append(":\n\n");

        for (int i = 0; i < owls.size(); i++) {
            Owl owl = owls.get(i);
            sb.append((i + 1)).append(". ").append(owl.name);
            sb.append("\n   –¢–∏–ø: ").append(owl.type);
            sb.append("\n   –†—ñ–≤–µ–Ω—å: ").append(owl.skillLevel);
            sb.append("\n   –¢–µ—Ö–Ω—ñ–∫–∏ Shinobi: ").append(owl.hasShinobiTechniques ? "–¢–∞–∫" : "–ù—ñ");

            if (i < owls.size() - 1) {
                sb.append("\n\n");
            }
        }

        return sb.toString();
    }

    public boolean containsPoint(double x, double y) {
        return canvas.getBoundsInParent().contains(x, y);
    }

    public ArrayList<Owl> getOwls() {
        return new ArrayList<>(owls);
    }

    public String getInfo() {
        return name + " (" + castleType + ") - –°–æ–≤: " + owls.size();
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å–æ–≤–∏ –∑–∞ —ñ–Ω–¥–µ–∫—Å–æ–º (–¥–ª—è –º–µ–Ω—é)
    public boolean removeOwlByIndex(int index) {
        if (index >= 0 && index < owls.size()) {
            Owl owl = owls.get(index);
            removeOwl(owl);
            return true;
        }
        return false;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–æ–≤–∏ –∑–∞ —ñ–Ω–¥–µ–∫—Å–æ–º
    public Owl getOwlByIndex(int index) {
        if (index >= 0 && index < owls.size()) {
            return owls.get(index);
        }
        return null;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –Ω–∞–∑–≤ —Å–æ–≤ –¥–ª—è –≤–∏–±–æ—Ä—É –≤ –¥—ñ–∞–ª–æ–∑—ñ
    public String[] getOwlNamesArray() {
        String[] names = new String[owls.size()];
        for (int i = 0; i < owls.size(); i++) {
            Owl owl = owls.get(i);
            names[i] = (i + 1) + ". " + owl.name + " [" + owl.skillLevel + "]" +
                    (owl.hasShinobiTechniques ? " (Shinobi)" : "");
        }
        return names;
    }

    // –°—Ç–∞—Ç–∏—á–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞–Ω—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É—Ä
    public static boolean areTexturesLoaded() {
        return texturesLoaded;
    }

    // –°—Ç–∞—Ç–∏—á–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Ñ–æ—Ä—Å–æ–≤–∞–Ω–æ–≥–æ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É—Ä
    public static void reloadTextures() {
        texturesLoaded = false;
        texturesLoading = false;
        textures.clear();
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É—Ä
    public static String getTextureLoadingStatus() {
        if (texturesLoaded) {
            return "–¢–µ–∫—Å—Ç—É—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ (" + textures.size() + " —Ñ–∞–π–ª—ñ–≤)";
        } else if (texturesLoading) {
            return "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É—Ä...";
        } else {
            return "–¢–µ–∫—Å—Ç—É—Ä–∏ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ";
        }
    }
}